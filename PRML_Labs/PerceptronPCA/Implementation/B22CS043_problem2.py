# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V7FqcEJd6WJ32WaKXqeJ0hMV5C48WjV9
"""

from sklearn.datasets import fetch_lfw_people
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import numpy as np

lfw_people = fetch_lfw_people(min_faces_per_person=70, resize=0.4)
X = lfw_people.data
y = lfw_people.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

n_components = 150
pca = PCA(n_components=n_components, svd_solver='randomized', whiten=True)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

knn_classifier = KNeighborsClassifier()
knn_classifier.fit(X_train_pca, y_train)
predictions = knn_classifier.predict(X_test_pca)
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)

eigenfaces = pca.components_.reshape((n_components, lfw_people.images.shape[1], lfw_people.images.shape[2]))
plt.figure(figsize=(10, 5))
for i in range(10):
    plt.subplot(2, 5, i + 1)
    plt.imshow(eigenfaces[i], cmap='gray')
    plt.title(f"Eigenface {i + 1}")
    plt.axis('off')
plt.show()

n_components_list = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]
accuracy_scores = []

for n_comp in n_components_list:
    pca = PCA(n_components=n_comp, svd_solver='randomized', whiten=True)
    X_train_pca = pca.fit_transform(X_train)
    X_test_pca = pca.transform(X_test)

    knn_classifier = KNeighborsClassifier()
    knn_classifier.fit(X_train_pca, y_train)

    predictions = knn_classifier.predict(X_test_pca)
    accuracy = accuracy_score(y_test, predictions)
    accuracy_scores.append(accuracy)

plt.plot(n_components_list, accuracy_scores, marker='o')
plt.title('Impact of n_components on Accuracy')
plt.xlabel('Number of Components')
plt.ylabel('Accuracy')
plt.grid(True)
plt.show()